openapi: 3.0.0
servers:
  - url: 'https://api.event.staging.daznservices.com'
    description: |
      Staging (pre-production) version
  - url: 'https://api.event.daznservices.com'
    description: |
      Production (not available yet)

info:
  version: "0.0.1-draft"
  title: DAZN External Ad Data  API
  description: |
    The DAZN  Ad-Tag API presents requests that allow  ad tag data for a given live or non-live (vod)
    event scheduled on a DAZN region to be retrieved for different playout types.

    For a live event ad  data returned represents the data and format used in a GAM Master Ad Tag request and
    can be retrieved for either a Live Backup (aka regional) playout or Live DAI playout and formatted
    as either a JSON document or a formed master ad-tag query string.

    For Vod, the data returned is not master ad tag related but represents values that are included in
    the MRSS file presented to Google, typically containing unique descriptions of MFL entites with the UUIDs appended.

    *Staging*: https://eventapi.stage.daznservices.com

    *Production* (not available yet): https://eventapi.daznservices.com

security:
  - ApiKeyAuth: []

paths:
  '/masteradtagdata/livebackup':
    get:
      tags:
        - master adtag data
      summary: |
        Get the data that is used in the masteradtag for a Live Backup stream
      description: |
        A  request that returns a single a JSON document that presents all the values that will be required
         in a master ad-tag related to a given stream type, location and fixtureUUID.

      parameters:
        - name: location
          in: query
          description: |
            The location - Region or country - that the master ad-tag is required for.
          schema:
            type: string
          example: DACH
          required: true
        - name: fixtureUUID
          in: query
          description: |
            The UUID of the MFL Fixture which identifies the event for which the master ad-tag is requested.
          schema:
            type: string
            format: uuid
          example: 2423hhduwyqutrqtywue
          required: true
        - name: platform
          in: query
          description: |
            The platform that the requested event is for. (NB - this is a placeholder for future use and the
            values here (apart from OTT) are speculative.
          schema:
            type: string
            enum:
              - OTT
              - LINEAR
              - OFFPLATFORM
            default: OTT
          example: OTT
          required: false



      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveBackupMasterAdTagData'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '503':
          $ref: '#/components/responses/Error503'
        default:
          $ref: '#/components/responses/Error'

  '/masteradtagdata/livedai':
    get:
      tags:
        - master adtag data
      summary: |
        Get the data that is used in the masteradtag for a Live DAI  stream
      description: |
        A  request that returns a single a JSON document that presents all the values that will be required
         in a master adtag related to a given stream type, location and fixtureUUID.

      parameters:
        - name: location
          in: query
          description: |
            The location - Region or country - that the master ad-tag is required for.
          schema:
            type: string
          examples:
            DACH:
              value: DACH
              description: The DACH region
            IT:
              value: IT
              description: Italy Region
          required: true
        - name: fixtureUUID
          in: query
          description: |
            The UUID of the MFL Fixture for which the master ad-tag is requested.
          schema:
            type: string
            format: uuid
          example: 2423hhduwyqutrqtywue
          required: true
        - name: platform
          in: query
          description: |
            The platform that the requested event is for. (NB - this is a placeholder for future use and the
            values here (apart from OTT) are speculative.
          schema:
            type: string
            enum:
              - OTT
              - LINEAR
              - OFFPLATFORM
            default:
          example: OTT
          required: false


      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveDaiMasterAdTagData'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '503':
          $ref: '#/components/responses/Error503'
        default:
          $ref: '#/components/responses/Error'

  '/vodaddata':
    get:
      tags:
        - vod ad data
      summary: >
        Get ad related properties associated with a Vod Event or relating to a given region and fixture.
      description: |
        A  request that returns a single a JSON document that presents all the vod ad related  values that will be required
        in a master adtag related to a given asss type, location and fixtureUUID.

        NB: In the short term because there is no direct link between a non-live event in WoN and article/vod feeds that
        are used to source non-live events we require the API to be able to handle the situation where the API is presented
        with a MFL id from any type of asset.

        In the case the asset is a fixture then the ad-tag data can be derived from the event data.

        For other types mfl related ad-tag data can be derived using the given mfl data and contractual compliance data will be
        calculated using a statically configured lookup table for competitions, tournament calendar and contestant.
        If only a sport is provided then no contractual compliance data can be provided.


      parameters:
        - name: location
          in: query
          description: |
            The location - Region or country - that the master ad-tag is required for.
          schema:
            type: string
          example: DACH
          required: false
        - name: vodType
          in: query
          description: |
            The Vod Type (Could be a enum? Not clear what the range of Vod Types is and how it will be propagated)
          schema:
            type: string
          example: HIGHLIGHTS
          required: false
        - name: mflType
          in: query
          description: |
            The type of asset the item of Vod is linked with.
          schema:
            type: string
            enum:
              - FIXTURE
              - COMPETITION
              - CONTESTANT
              - SPORT
              - TOURNAMENTCALENDAR
            default: FIXTURE
        - name: mflUuid
          in: query
          description: |
            The UUID related MFL Asset .
          schema:
            type: string
            format: uuid
          example: 2423hhduwyqutrqtywue
          required: false
        - name: eventId
          in: query
          description: |
            The Id of the Vod Event. If the Vod Event Id is known this should be the only parameter presented
          schema:
            type: string
            format: wonId
          example: 123432323
          required: false

      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VodAdValues'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '503':
          $ref: '#/components/responses/Error503'
        default:
          $ref: '#/components/responses/Error'

  '/masteradtag/{type}':
    get:
      tags:
        - master ad tag
      summary: |
        Get a master ad-tag query string
      description: |
        A  request that returns a single a JSON document with single key that references
        the query string for a masteradtag request related to a given stream type, location and fixtureUUID.

      parameters:
        - name: type
          in: path
          description: |
            The type of stream that the master ad tags is to be used fro
          schema:
            type: string
            enum:
              - livebackup
              - livedai
          example: livebackup
          required: true
        - name: location
          in: query
          description: |
            The location - Region or country - that the master ad-tag is required for.
          schema:
            type: string
          example: DACH
          required: true
        - name: fixtureUUID
          in: query
          description: |
            The UUID of the MFL Fixture for which the master ad-tag is requested.
          schema:
            type: string
            format: uuid
          example: 2423hhduwyqutrqtywue
          required: true

      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  master-ad-tag:
                    description: |
                      The returned master ad tag query string

                    type: string
                    example: "env=vp&gdfp_req=1&output=vast&iu=/1234/video-demo&sz=999x999v&unviewed_position_start=1&ciu_szs=728x90,300x250"
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '503':
          $ref: '#/components/responses/Error503'
        default:
          $ref: '#/components/responses/Error'

components:
  securitySchemes:
    ApiKeyAuth:
      description: |
        In order to access the API the caller must present a unique API Access Key provided by DAZN which will allow access to requests
        permitted by for the given caller. This access key may be withdrawn and replaced with a new one, if the key is
        compromised or for other technical reasons.

        This API must be passed in the X-API-KEY header.
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:
    BaseMasterAdTagData:
      type: object
      properties:
        description_url:
          type: string
          description: |
            The description url
          example: 'http://dazn.com/foo'
        env:
          type: string
          description: |
            The env
          example: vp
        gdfp_req:
          type: string
          description: |
            The
          example: 1
        iu:
          type: string
          description: |
            Related ad unit
          example: '/DAZN-Network/DACH/Live_Backup/soccer/EPL'
        sz:
          type: string
          description: |
            The output
          example: 999x999v
        unviewed_position_start:
          type: string
          description: |
            The unview position start
          example: 1
        url:
          type: string
          description: |
             the url
          example:
            http://dazn.com
        nofb:
          type: string
          description: |
            nofb value
          example: 1
        npa:
          type: string
          description: |
            nap value
          example: 1
        pmad:
          type: string
          description: |
            pmad
          example: 0
        pmnd:
          type: string
          description: |
            pmnd
          example: 0
        vad_type:
          type: string
          description: |
            video ad type
          example: linear
        vpos :
          type: string
          description: |
            video position
          example: preroll
        ptpln:
          type: string
          description: |
            The id of the template used to create the break structure in WoN
          example: 131236556


    LiveBackupMasterAdTagData:
      allOf:
        - $ref: '#/components/schemas/BaseMasterAdTagData'
        - type: object
          properties:
            cust_params:
              $ref: '#/components/schemas/LiveBackupCustomValues'
            output:
              type: string
              description: |
                The output
              example: vast4
            hl:
              type: string
              description: |
                ad language
              example: EN


    LiveDaiMasterAdTagData:
      allOf:
        - $ref: '#/components/schemas/BaseMasterAdTagData'
        - type: object
          properties:
            cust_params:
              $ref: '#/components/schemas/LiveDaiCustomValues'



    BaseCustomValues:
      type: object
      properties:
        excl_cat:
          type: array
          description: |
            categories to exclude
          example: ["Gambling", "Alcohol"]
        AdvTV_Sport:
          type: string
          format: uuid
          description: |
             UUID of the MFL sport
          example: iwi845820oeier959
        AdvTV_Competition:
          type: string
          format: uuid
          description: |
             UUID of the MFL competition
          example: iwi84dfdfdfeier959
        AdvTV_Season:
          type: string
          format: uuid
          description: |
            UUID of the MLF tournament calendar
          example: 34299203uiogerout9348
        AdvTV_Stage:
          type: string
          format: uuid
          description: |
            UUID of the MLF calendar stage
          example: 34299203uiogerout9348
        AdvTV_Competitors:
          type: array
          format: uuid
          description: |
            List of MFL contestant UUIDs
          example: ["34299203uiogerout9348", "dfsfsgdfgdsfg"]
        AdvTV_MFL_ID:
          type: string
          format: uuid
          description: |
            MFL Fixture UUID
          example: 34299203uiogerout9348
        AdvTV_BroadcastCountry:
          type: array
          format: iso-country-code
          description: |
            List of iso country code where the stream will be broadcast
          example: ["AT", "DE"]
          minItems: 1
#        AdvTV_ExcludeCategory:
#          type: array
#          description: |
#            categories to exclude, but with a different key!
#          example: ["Gambling", "Alcohol"]
#          minItems: 0
        AdvTV_LiveType:
          type: string
          enum:
            - Live_Broadcast
            - Delayed_Broadcast
          description: |
            The type of the live event
          example: Live_Broadcast
        AdvTV_CommentaryLang:
          type: array
          description: |
            A list of languages that are part of the stream delivered for this event. NB until MTA is available
            there will only ever be one.
          example: ["DE", "AT"]
          minItems: 1
        AdvTV_BroadcastType:
          type: string
          enum:
            - World_Feed
            - Host_Feed
          description: |
            Broadcast type
          example: World_Feed
        AdvTV_RightsHolder:
          type: string
          format: uuid
          description: |
            UUID of the Rights holder
          example: 123567009
        AdvTV_BroadcastTier:
          type: string
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          description: |
            Broadcast Tier
          example: 5

    LiveBackupCustomValues:
      allOf:
        - $ref: '#/components/schemas/BaseCustomValues'

    LiveDaiCustomValues:
      allOf:
        - $ref: '#/components/schemas/BaseCustomValues'


# VoD data
#    VodMasterAdTagData:
#      type: object
#      properties:
#        cust_params:
#          $ref: '#/components/schemas/VodCustomValues'
#        description_url:
#          type: string
#          description: |
#            The description url
#          example: 'http://dazn.com/foo'
#        env:
#          type: string
#          description: |
#            The env
#          example: vp
#        gdfp_req:
#          type: string
#          description: |
#            The
#          example: 1
#        iu:
#          type: string
#          description: |
#            Related ad unit
#          example: '/DAZN-Network/TBD'
#        sz:
#          type: string
#          description: |
#            The output
#          example: 4k
#        unviewed_position_start:
#          type: string
#          description: |
#            The unview position start
#          example: 1
#        url:
#          type: string
#          description: |
#            the url
#          example:
#            http://dazn.com
#        nofb:
#          type: string
#          description: |
#            nofb value
#          example: 1
#        npa:
#          type: string
#          description: |
#            nap value
#          example: 1
#        pmad:
#          type: string
#          description: |
#            pmad
#          example: 0
#        pmnd:
#          type: string
#          description: |
#            pmnd
#          example: 0
#        vad_type:
#          type: string
#          description: |
#            video ad type
#          example: linear
#        vpos :
#          type: string
#          description: |
#            video position
#          example: preroll


    VodAdValues:
      type: object
      properties:
        ExcludeCategory:
          type: array
          description: |
            categories to exclude
          example: ["Gambling", "Alcohol"]
        Sport:
          type: string
          format: uuid
          description: |
           Name MFL sport
          example: Soccer
          required: true
        Competition:
          type: string
          description: |
            Unique-ish description of the MFL Competition along with the UUID
          example: Primera División-Men-Spain-9492349idusyuyiwsoe
          required: true
        Season:
          type: string
          description: |
            Name of the  MLF tournament calendar
          example: Primera División 2018-2019-Men-Spain-2429iiiedui78435546
          required: false
        Stage:
          type: string
          description: |
            Unique-ish dfescription of the f the MLF calendar stage along with the UUID
          example: Regular Season-Men-Primera División-Primera División 2018/2019-iieuwwe766239400
          required: false
        Competitors:
          type: array
          description: |
            List of MFL contestant Names
          example: ["Leganés-Soccer-Men-Spain-89483498393829"]
        Fixture:
          type: string
          description: |
            MFL Fixture Name
          example: Chicago Cubs v Boston Red Sox-98239348904888324
          required: false
        BroadcastCountry:
          type: array
          format: iso-country-code
          description: |
            List of iso country code where the stream will be broadcast
          example: ["AT", "DE"]
          minItems: 1
          required: false
        VodType:
          type: string
          enum:
            - Catch Up
            - Highlights
            - Shoulder
          description: |
            The type of the Vod event
          example: Highlights
          required: false
#        CommentaryLang:
#          type: array
#          description: |
#            A list of languages that are part of the stream delivered for this event. NB until MTA is available
#            there will only ever be one.
#          example: ["DE", "AT"]
#          minItems: 1
#        BroadcastType:
#          type: string
#          enum:
#            - World_Feed
#            - Host_Feed
#          description: |
#            Broadcast type
#          example: World_Feed
        RightsHolder:
          type: string
          format: uuid
          description: |
            UUID of the Rights holder
          example: 123567009
          required: true


    BaseErrorProperties:
      type:  object
      properties:
        message:
          type: string
          description: >-
            A message that describes the error
          example: The request is not valid
        token:
          type: string
          description: >-
            Unique id to allow the log report for this error to located
          example: 7463ye636363

  #
  # Note where responses share common response headers - like X-Status-Code here - there is no way of avoiding repitition
  # in openapi (a little crap then)
  #
  responses:
    Error:
      description: Undocumented error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: >-
                  Error

    Error400:
      description: Error returned when the client request is not in a valid format or contains invalid data
      headers:
        X-Status-Code:
          description: >-
            in case of error containing error code (useful for integration)
            tests to easily retrieve error code)
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            required: [code, message, token]
            allOf:
              - $ref: '#/components/schemas/BaseErrorProperties'
              - type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    description: |
                      * 40050: The request contains an unknown query parameter
                      * 40051: No value was passed for a mandatory field
                      * 40052: Value for a field was passed, but it was not a valid value: see documentation
                    enum:
                      - 40050
                      - 40051
                      - 40052
                    example: 40051

                  fieldName:
                    type: string
                    description: Contains the name of the field related to the error, if any
                    example: type


    Error403:
      description: Forbidden Error - the caller is not permissioned for this request
      headers:
        X-Status-Code:
          description: >-
            in case of error containing error code (useful for integration
            tests to easily retrieve error code)
          schema:
            type: integer
      content:
        application/json:
          schema:
            required: [code, message, token]
            allOf:
              - $ref: '#/components/schemas/BaseErrorProperties'
              - type: object
                properties:
                  code:
                    type: number
                    description: |
                      * 40301: The calling client does not have an allowed IP address
                    enum:
                      - 40301

    Error404:
      description: The request resource was not found
      headers:
        X-Status-Code:
          description: >-
            in case of error containing error code (useful for integration
            tests to easily retrieve error code)
          schema:
            type: number
      content:
        application/json:
          schema:
            required: [code, message, token]
            allOf:
              - $ref: '#/components/schemas/BaseErrorProperties'
              - type: object
                properties:
                  code:
                    type: number
                    description: |
                      * 40451: An MLF Fixture with the presented UUID does not exist
                      * 40452: The location cannot be resovled to a single DAZN region
                      * 40453: The the value in the type parameter is not valid.
                    enum:
                      - 40451
                      - 40452
                      - 40453


    Error503:
      description: Service Unavailable
      headers:
        X-Status-Code:
          description: >-
            in case of error containing error code (useful for integration
            tests to easily retrieve error code)
          schema:
            type: number
      content:
        application/json:
          schema:
            required: [code, message, token]
            allOf:
              - $ref: '#/components/schemas/BaseErrorProperties'
              - type: object
                properties:
                  code:
                    type: number
                    description: |
                      * 50351: The request failed because a dependent API could not be accessed.
                    enum:
                      - 50351